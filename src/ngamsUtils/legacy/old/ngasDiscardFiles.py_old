

#
#    ALMA - Atacama Large Millimiter Array
#    (c) European Southern Observatory, 2002
#    Copyright by ESO (in the framework of the ALMA collaboration),
#    All rights reserved
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
#    MA 02111-1307  USA
#

#******************************************************************************
#
# "@(#) $Id: ngasDiscardFiles.py_old,v 1.1.1.1 2005/07/26 09:25:11 ngasmgr Exp $"
#
# Who       When        What
# --------  ----------  -------------------------------------------------------
# jknudstr  21/01/2004  Created
#

"""
Tool to remove files from the NGAS DB + Disk.

The disk(s) hosting he files to be removed/discarded from the NGAS Archive
must inserted in the NGAS System on which this command is executed.

The format of the file list is:

<Disk ID> <File ID> <File Version>
<Disk ID> <File ID> <File Version>
...



                          *** CAUTION ***
                          
THIS IS A VERY DANGEROUS TOOL TO USE, SINCE IT ALLOWS TO REMOVE ARCHIVED
FILES FROM AN NGAS ARCHIVE ALSO IF THESE ARE AVAILABLE IN LESS THAN 3
COPIES. SHOULD BE USED WITH GREAT CAUTION!!!
"""

import sys, os, time

from ngams import *
import ngamsDb, ngamsLib, ngamsFileInfo, ngamsDiskInfo
import ngasUtils, ngasUtilsLib


def _unpackFileInfo(fileListLine):
    """
    Unpack the information in the line read from the File List File.

    fileListLine:  Line as read from the file (string).

    Returns:       Tuple with file info:

                   (<Disk ID>, <File ID>, <File Version>)  (tuple)
    """
    fileInfoList = []
    lineEls = fileListLine.split(" ")
    for el in lineEls:
        if ((el.strip() != "") and (el.strip() != "\t")):
            fileInfoList.append(el.strip())
            if (len(fileInfoList) == 3): break
    if (len(fileInfoList) == 3):
        return (fileInfoList[0], fileInfoList[1], fileInfoList[2])
    else:
        raise Exception, "Illegal line found in File List File: " +\
              fileListLine


def discardFiles(fileListFile,
                 execute,
                 force,
                 notifEmail):
    """
    Remove files from the NGAS DB + from from the disk.

    fileListFile:   Name of file containing list with references to
                    files to remove (string).
    
    execute:        Actual remove the files (integer/0|1).
    
    force:          Force removal of files having only one
                    copy (integer/0|1).
    
    notifEmail:     List of email addresses to inform about the
                    execution of the discation procedure (string).

    Returns:        Void.
    """
    # Open DB connection.
    server, db, user, password = ngasUtilsLib.getDbPars()
    dbCon = ngamsDb.ngamsDb(server, db, user, password, 0)

    # Get the complete information for each file listed in the file list.
    fo = open(fileListFile)
    fileListBuf = fo.readlines()
    fo.close()
    fileInfoDic = {}
    diskInfoDic = {}
    remFileDic  = {}
    for line in fileListBuf:
        if ((line.strip() == "") or (line.strip()[0] == "#")): continue
        diskId, fileId, fileVersion = _unpackFileInfo(line)
        curObj = dbCon.getFileInfoList("", fileId, fileVersion)
        fileInfoList = curObj.fetch(1000)
        del curObj
        for fileInfo in fileInfoList:
            tmpFileInfoObj = ngamsFileInfo.ngamsFileInfo().\
                             unpackSqlResult(fileInfo)
            fileKey = ngamsLib.genFileKey(None, tmpFileInfoObj.getFileId(),
                                          tmpFileInfoObj.getFileVersion())
            if (not fileInfoDic.has_key(fileKey)):
                fileInfoDic[fileKey] = []
            fileInfoDic[fileKey].append(tmpFileInfoObj)
            diskInfoDic[tmpFileInfoObj.getDiskId()] = None
            if (tmpFileInfoObj.getDiskId() == diskId):
                fileKey = ngamsLib.genFileKey(tmpFileInfoObj.getDiskId(),
                                              tmpFileInfoObj.getFileId(),
                                              tmpFileInfoObj.getFileVersion())
                remFileDic[fileKey] = tmpFileInfoObj
        time.sleep(0.100)

    # Get information for all disks involved.
    for diskId in diskInfoDic.keys():
        sqlDiskInfo = dbCon.getDiskInfoFromDiskId(diskId)
        tmpDiskInfoObj = ngamsDiskInfo.ngamsDiskInfo().\
                         unpackSqlResult(sqlDiskInfo)
        diskInfoDic[diskId] = tmpDiskInfoObj

    # Check if there are enough copies in the system of each file to be
    # removed unless force is specified.
    misFileCopyList = []
    if (not force):
        for fileKey in fileInfoDic.keys():
            if (len(fileInfoDic[fileKey]) < 2):
                fileId = fileInfoDic[fileKey][0].getFileId()
                fileVersion = fileInfoDic[fileKey][0].getFileVersion()
                misFileCopyList.append((fileId, fileVersion))
    if (len(misFileCopyList)):
        report = "FILE DISCARD REPORT:\n\n" +\
                 "Files not available in at least 2 copies:\n\n"
        for el in misFileCopyList:
            report += "%-32s %d\n" % (el[0], el[1])
        report += "\n"
        print "\n" + report
        if (notifEmail):
            ngasUtilsLib.sendEmail("ngasDiscardFiles: MISSING FILE COPIES",
                                   notifEmail, report)
        raise Exception, "File copies missing!"

    # Check now if the files can be removed.
    nonRemFiles = []
    for fileKey in remFileDic.keys():
        fio = remFileDic[fileKey]
        dio = diskInfoDic[fio.getDiskId()]
        complFilename = os.path.normpath(dio.getMountPoint() + "/" +\
                                         fio.getFilename())
        if (not ngamsLib.fileRemovable(complFilename)):
            nonRemFiles.append(complFilename)
    if (len(nonRemFiles)):
        report = "FILE DISCARD REPORT:\n\n" +\
                 "Non-removable files:\n\n"
        for filename in nonRemFiles:
            report += filename + "\n"
        report += "\n"
        print "\n" + report
        if (notifEmail):
            ngasUtilsLib.sendEmail("ngasDiscardFiles: NON-REMOVABLE FILES",
                                   notifEmail, report)
        raise Exception, "Non-removable files found!"

    # If execute is specified loop over the files and remove them one by one.
    fileInfoFormat = "%-32s %-32s %-3d %s\n"
    if (execute):
        successDelList = []
        failedDelList = []
        for fileKey in remFileDic.keys():
            fio = remFileDic[fileKey]
            dio = diskInfoDic[fio.getDiskId()]
            complFilename = os.path.normpath(dio.getMountPoint() + "/" +\
                                             fio.getFilename())
            try:
                #dbCon.deleteFileInfo(fio.getDiskId(), fio.getFileId(),
                #                     fio.getFileVersion(), 0)
                sqlQuery = "DELETE FROM ngas_files WHERE disk_id='%s' AND " +\
                           "file_id='%s' AND file_version=%s"
                sqlQuery = sqlQuery % (fio.getDiskId(), fio.getFileId(),
                                       str(fio.getFileVersion()))
                dbCon.query(sqlQuery)
                rmFile(complFilename)
                successDelList.append((fio.getDiskId(), fio.getFileId(),
                                      fio.getFileVersion(), complFilename))
            except Exception, e:
                failedDelList.append((fio.getDiskId(), fio.getFileId(),
                                      fio.getFileVersion(), complFilename))
            time.sleep(0.100)

        # Generate report.
        report = "FILE DISCARD REPORT:"
        if (len(successDelList)):
            report += "\n\nDiscarded Files:\n\n"
            for fileInfo in successDelList:
                report += fileInfoFormat %\
                          (fileInfo[0], fileInfo[1], fileInfo[2], fileInfo[3])
        if (len(failedDelList)):
            report += "\n\nFailed File Discards:\n\n"
            for fileInfo in failedDelList:
                report += fileInfoFormat %\
                          (fileInfo[0], fileInfo[1], fileInfo[2], fileInfo[3])
        if ((not len(successDelList)) and (not len(failedDelList))):
            report += "\n\nNo matching files found\n"
        report += "\n"
        print "\n" + report
        if (notifEmail):
            ngasUtilsLib.sendEmail("ngasDiscardFiles: FILE DISCARD REPORT",
                                   notifEmail, report)
    else:
        # Just send a report to the user confirming the list of files selected
        # to be discarded.
        report = "FILE DISCARD REPORT:\n\n" +\
                 "Files selected to be discarded:\n\n"
        for fileKey in remFileDic.keys():
            fio = remFileDic[fileKey]
            dio = diskInfoDic[fio.getDiskId()]
            complFilename = os.path.normpath(dio.getMountPoint() + "/" +\
                                             fio.getFilename())
            report += fileInfoFormat %\
                      (fio.getDiskId(), fio.getFileId(),
                       fio.getFileVersion(), complFilename)
        report += "\n"
        print "\n" + report
        if (notifEmail):
            ngasUtilsLib.sendEmail("ngasDiscardFiles: FILE DISCARD REPORT",
                                   notifEmail, report)
          

def correctUsage():
    """
    Return the usage/online documentation in a string buffer.

    Returns:  Man-page (string).
    """
    buf = "\nCorrect usage is:\n\n" +\
          "> python ngasDicardFiles.py [-accessCode <Code>] \n" +\
          "         -fileList <File List> | -dccMsg <DCC Msg File>\n" +\
          "         [-execute] [-force] [-notifEmail <Email List>]\n\n" +\
          "The format of the file list is:\n\n" +\
          "<Disk ID> <File ID> <File Version>\n" +\
          "<Disk ID> <File ID> <File Version>\n" +\
          "...\n\n" +\
          "Such a file list can be generated with an SQL query of the " +\
          "form:\n\n"+\
          "  SELECT disk_id, file_id, file_version FROM ngas_files WHERE "+\
          "<Where Clause>\n\n" +\
          "Blank lines and lines initiated with # are ignored. The\n" +\
          "number of spaces between the field is not significant.\n\n" +\
          "BEWARE: THIS IS A VERY DANGEROUS TOOL, WHICH MAY RESULT IN\n" +\
          "        LOSS OF DATA. TO BE USED WITH GREAT CAUTION!!\n"
    return buf

  
if __name__ == '__main__':
    """
    Main function to execute the tool.
    """

    # Parse input parameters.
    accessCode   = ""
    fileListFile = ""
    dccMsgFile   = ""
    execute      = 0
    force        = 0
    notifEmail   = None
    idx = 1
    while idx < len(sys.argv):
        par = sys.argv[idx].upper()
        try:
            if (par == "-ACCESSCODE"):
                idx += 1
                accessCode = sys.argv[idx]
            elif (par == "-FILELIST"):
                idx += 1
                fileListFile = sys.argv[idx]
            elif (par == "-DCCMSG"):
                idx += 1
                dccMsgFile = sys.argv[idx]
            elif (par == "-EXECUTE"):
                execute = 1
            elif (par == "-FORCE"):
                force = 1
            elif (par == "-NOTIFEMAIL"):
                idx += 1
                notifEmail = sys.argv[idx]
            else:
                sys.exit(1)
            idx += 1
        except Exception, e:
            print "\nProblem executing the File Discard Tool: %s\n" % str(e)
            print correctUsage()  
            sys.exit(1)
    if (notifEmail == None):
        notifEmail = ngasUtilsLib.\
                     getParNgasRcFile(ngasUtilsLib.NGAS_RC_PAR_NOTIF_EMAIL)
    if (dccMsgFile and (not fileListFile)):
        fileListFile = "/tmp/ngasDiscardFiles.tmp"
        rmFile(fileListFile)
        ngasUtilsLib.dccMsg2FileList(dccMsgFile, fileListFile)
    try:
        if (not fileListFile):
            print correctUsage()  
            raise Exception, "Incorrect command line parameter(s) given!"
        if (not accessCode):
            accessCode = ngasUtilsLib.input("Enter Access Code:")
        ngasUtilsLib.checkAccessCode(accessCode)
        discardFiles(fileListFile, execute, force, notifEmail)
    except Exception, e:
        print "\nProblem encountered:\n\n" + str(e) + " -- bailing out\n"


# EOF
