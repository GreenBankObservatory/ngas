

#
#    ALMA - Atacama Large Millimiter Array
#    (c) European Southern Observatory, 2002
#    Copyright by ESO (in the framework of the ALMA collaboration),
#    All rights reserved
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
#    MA 02111-1307  USA
#

#******************************************************************************
#
# "@(#) $Id: ngasCmdDispatcher.py_remove,v 1.1.1.1 2005/07/26 09:25:11 ngasmgr Exp $"
#
# Who       When        What
# --------  ----------  -------------------------------------------------------
# jknudstr  04/02/2003  Created
#

"""
"""

import os, sys, threading, thread, commands, time, signal
import cgi, urllib, getpass, re, smtplib
import Sybase

import pcc, PccLog
from ngams import *
import ngamsStatus

import ngasCmdDispatcherHtml

# Resolve the directory in which the script is executing.
fo = os.popen("pwd")
NGAS_SRC_DIR = fo.read()
if (NGAS_SRC_DIR[-1] == "\n"): NGAS_SRC_DIR = NGAS_SRC_DIR[0:-1]
fo.close()


def getNgasDiskColumns():
    """
    """
    return "nd.disk_id,	nd.archive, nd.installation_date, nd.type, " +\
           "nd.manufacturer, nd.logical_name, nd.host_id, nd.slot_id, " +\
           "nd.mounted, nd.mount_point, nd.number_of_files, " +\
           "nd.available_mb, nd.bytes_stored, nd.completed, " +\
           "nd.completion_date, nd.checksum, nd.total_disk_write_time, " +\
           "nd.last_check, nd.last_host_id"
 

def getSrcDir():
    """
    """
    global NGAS_SRC_DIR
    return NGAS_SRC_DIR


def info(level,
         msg):
    """
    Generate an Information Log entry in the log targets.
    This is not written to UNIX syslog.
    
    level:    Level indicator for this log entry.
    
    msg:      Message to log (string).

    Returns:  Void.
    """
    PccLog.info(level, msg)

 
def secs2IsoTime(secs):
    """
    """
    return time.strftime("%Y-%m-%dT%H:%M:%S", time.gmtime(secs))


def genTimeStat(startTime,
                fileCount,
                totNoFiles):
    """
    """
    timeNow = time.time()
    timeDif = (timeNow - startTime)
    estimTime = int((float(totNoFiles) *\
                     (float(timeDif) / float(fileCount))) + 0.5)
    if (fileCount == totNoFiles):
        estimTime = "00h00m00s"
    else:
        estimTime = time.strftime("%Hh%Mm%Ss", time.gmtime(estimTime))
    totTime = time.strftime("%Hh%Mm%Ss", time.gmtime(timeDif))
    timeFrame = time.gmtime(int((timeDif / fileCount) + 0.5))
    timeFrame = time.strftime("%Mm%Ss", timeFrame)
    timeUpdate = secs2IsoTime(timeNow)
    return estimTime, totTime, timeFrame, timeUpdate


def sendEmail(smtpHost,
              subject,
              to,
              fromField,
              msg,
              contentType = None,
              attachmentName = None):
    """
    Send an e-mail to the recipient with the given subject.
    
    smtpHost:       Mail server to use for sending the mail (string).
    
    subject:        Subject of mail message (string).
    
    to:             Recipient, e.g. user@test.com (string).
        
    fromField:      Name for the from field (string).
        
    msg:            Message to send (string).

    contentType:    Mime-type of message (string).
    
    attachmentName: Name of attachment in mail (string).
              
    Returns:        Void.
    """
    emailList = to.split(",")
    for emailAdr in emailList:
        try:
            hdr = "Subject: " + subject + "\n"
            if (contentType):
                hdr += "Content-type: " + contentType + "\n"
            if (attachmentName):
                hdr += "Content-disposition: attachment; filename=" +\
                       attachmentName + "\n"
            tmpMsg = hdr + "\n" + msg
            server = smtplib.SMTP(smtpHost)
            server.sendmail("From: " + fromField, "Bcc: " + emailAdr, tmpMsg)
        except Exception, e:
            errMsg = genLog("NGAMS_ER_EMAIL_NOTIF",
                            [to,fromField,smtpHost,str(e)])
            error(errMsg)
            raise Exception, errMsg


class ngasCmdDispatcher:
    """
    """

    def __init__(self,
                 dbServer,
                 dbName,
                 dbUser,
                 dbUserPassword):
        """
        """
        self.reset()
        self.__dbServer       = dbServer
        self.__dbName         = dbName
        self.__dbUser         = dbUser
        self.__dbUserPassword = dbUserPassword

        signal.signal(signal.SIGTERM, self.exitHandler)
        signal.signal(signal.SIGINT, self.exitHandler)

        # Some constants.
        self.HTTP_BOUNDARY = "NGAS_CMD_DISPATCHER"
        self.updateRate    = 5
        self.notifEmail    = None


    def reset(self):
        """
        """
        self.__logFetcherThread    = None
        self.__cmdHandlingThread   = None
        self.__cmdResult           = None
        self.__remoteLogFileBuf    = []
        self.__logFetcherThreadRun = None
        self.__dbConObj            = None
        self.__dbServer            = None
        self.__dbName              = None
        self.__dbUser              = None
        self.__dbUserPassword      = None


    def __del__(self):
        """
        """
        self.stopLogFetcherThread()
        del self.__logFetcherThread
        del self.__cmdHandlingThread
        del self.__cmdResult
        del self.__remoteLogFileBuf
        del self.__logFetcherThreadRun
        del self.__dbConObj
        self.reset()


    def dbQuery(self,
                query):
        """
        """
        # Connect if not connected.
        if (not self.__dbConObj):
            self.__dbConObj = Sybase.connect(self.__dbServer, self.__dbUser,
                                             self.__dbUserPassword)
            self.__dbConObj.execute("use " + self.__dbName)

        # Execute query and return raw result.
        return self.__dbConObj.execute(query)

    
    def exitHandler(self,
                    signal,
                    frameObj):
        """
        """
        self.stopLogFetcherThread()
        sys.exit(1)


    def getLogicalName(self,
                       diskId):
        """
        """
        res = self.dbQuery("SELECT logical_name FROM ngas_disks WHERE " +\
                           "disk_id='" + diskId + "'")
        if (len(res[0]) > 0):
            logicalName = res[0][0][0]
        else:
            logicalName = "UNKNOWN-DISK"
        return logicalName
        

    def startLogFetcherThread(self,
                              ngasHost,
                              remoteLogFile):
        """
        """
        self.__logFetcherThreadRun = 1
        args = (ngasHost, remoteLogFile, None)
        self.__logFetcherThread = threading.Thread(None, self.logFetcherThread,
                                                   "LOG-FETCHER-THREAD", args)
        self.__logFetcherThread.start()
    

    def stopLogFetcherThread(self):
        """
        """
        self.__logFetcherThreadRun = 0


    def logFetcherThread(self,
                         ngasHost,
                         remoteLogFile,
                         dummy):
        """
        """
        # Open connection to the remote host.
        index = "INIT"
        while (self.__logFetcherThreadRun):
            try:
                cmd = "rsh " + ngasHost + " -l ngasmgr " +\
                      " ngasLogRequestor.py " +\
                      str(index) + " " + remoteLogFile
                status, output = commands.getstatusoutput(cmd)

                # Handle the new log lines
                bufLines = output.split("\n")
                try:
                    index = int(bufLines[0])
                    while (bufLines[-1].strip() == ""):
                        del bufLines[-1]        
                    if (len(bufLines) > 1):
                        self.__remoteLogFileBuf += bufLines[1:]  
                except:
                    self.__remoteLogFileBuf += bufLines
            except Exception, e:
                errMsg = "Error: Problem encountered while retrieving " +\
                         "information from log file: " + remoteLogFile +\
                         ". Exception: " + str(e)
                self.__remoteLogFileBuf.append(errMsg)
            time.sleep(1.0)

        # Exit this thread.
        thread.exit()


    def printAsciiErr(self,
                      errMsg):
        """
        """
        print "An error occurred while handling " +\
              "CLONE command:\n" + errMsg
        print "---------------------------------------" +\
              "---------------------------------"


    def getNewLogLines(self,
                       prevIdx):
        """
        """
        newLen = len(self.__remoteLogFileBuf)
        if (newLen > prevIdx):
            return (newLen, self.__remoteLogFileBuf[prevIdx:newLen])
        else:
            return (prevIdx, [])


    def sendCmd_(self,
                 url,
                 attachmentName):
        """
        """
        try:
            tmpFile, mtObj = urllib.urlretrieve(url)
            fo = open(tmpFile)
            self.__cmdResult = fo.read()
            # We log the complete command result:
            xmlDocStripped = re.sub("\n", "", str(self.__cmdResult)).strip()
            info(1,"Result handling command (URL: " + url + "): " +\
                 xmlDocStripped)
            if (self.notifEmail):
                sendEmail("smtphost.hq.eso.org", "Command Status (" +\
                          "URL: " + url + ")", self.notifEmail, 
                          "ngast", self.__cmdResult, "text/xml",
                          attachmentName)
            fo.close()
            return self.__cmdResult
        except Exception, e:
            errMsg = "Error: Problem encountered while handling " +\
                     "command with URL: " + url + ". Exception: " + str(e)
            self.__remoteLogFileBuf.append(errMsg)
            raise Exception, errMsg


    def cmdHandlingThread(self,
                          url,
                          attachmentName,
                          dummy):
        """
        """
        try:
            self.sendCmd_(url, attachmentName)
        except Exception, e:
            thread.exit()
        thread.exit()


    def sendCmd(self,
                url,
                attachmentName,
                wait = 0):
        """
        """
        if (not wait):
            # Execute command in thread.
            args = (url, attachmentName, None)
            self.__cmdHandlingThread = threading.\
                                       Thread(None, self.cmdHandlingThread,
                                              "CMD-HANDLING-THREAD", args)
            self.__cmdHandlingThread.start()
        else:
            return self.sendCmd_(url, attachmentName)


    def genDiskStatus(self,
                      parDic):
        """
        """
        info(2,"Generating disk status page")

        # Get the information about the disks.
        sqlQuery = "SELECT logical_name,disk_id,host_id,slot_id," +\
                   "number_of_files,bytes_stored FROM ngas_disks " +\
                   "WHERE host_id LIKE '" + parDic["host_id_pat"] + "%' " +\
                   "ORDER BY host_id,slot_id"
        res = self.dbQuery(sqlQuery)
        diskList = res[0]
        
        # Generate and print out page.
        print "Content-type: text/html\n"
        tbl = ngasCmdDispatcherHtml.genDiskTable(parDic, diskList)
        body = '<p><font color="#0000FF" size="4"><b>' +\
               'Select a disk by clicking on its name:</font></b></p>\n' + tbl
        page = ngasCmdDispatcherHtml.genStatusWebPage(parDic,
                                                      "Disk Status Page",
                                                      body + "<br>")
        print page
        info(2,"Leaving ngasCmdDispatcher.genDiskStatus()")


    def genSpecDiskPage(self,
                        parDic):
        """
        """
        info(2,"Generating specific disk status page for disk with ID: " +\
             parDic["disk_id"])

        # Get the information about the disks.
        sqlQuery = "SELECT " + getNgasDiskColumns() + " " +\
                   "FROM ngas_disks nd WHERE disk_id='" +\
                   parDic["disk_id"] + "'"
        res = self.dbQuery(sqlQuery)
        colNames = getNgasDiskColumns().split(",")
        diskInfoList = []
        idx = 0
        while (idx < len(res[0][0])):
            colName = colNames[idx].split(".")[1]
            val = str(res[0][0][idx])
            diskInfoList.append((colName, val))
            idx += 1
        
        # Generate and print out page.
        print "Content-type: text/html\n"
        print ngasCmdDispatcherHtml.genDiskActionPage(parDic, diskInfoList)
        info(2,"Leaving ngasCmdDispatcher.genSpecDiskPage()")
        

    def controlCmdClone(self,
                        parDic):
        """
        """
        info(2,"Executing command CLONE. Parameters - " +\
             "NGAS host: " + parDic["ngas_host"] + ", " +\
             "Log File: " + parDic["log_file"] + ", " +\
             "Server URL: " + parDic["ngas_url"] + ", " +\
             "Disk ID: " + parDic["disk_id"] + ", " +\
             "Generate WEB Page: " + str(parDic["gen_html"]))
             
        # Start thread to pick up log lines from remote host.
        self.startLogFetcherThread(parDic["ngas_host"], parDic["log_file"])

        # Find out how many files to clone.
        res = self.dbQuery("SELECT file_id FROM ngas_files WHERE " +\
                           "disk_id='" + parDic["disk_id"] + "'")
        if (len(res[0]) > 0):
            expCloneFiles = len(res[0])
        else:
            expCloneFiles = 0
        info(2,"Estimated number of candidate files: " + str(expCloneFiles))

        # Get Logical Name of disk.
        logicalName = self.getLogicalName(parDic["disk_id"])
        info(2,"Logical Name of disk to clone: " + logicalName)

        # Execute the CLONE command.
        try:
            if (logicalName == "UNKNOWN-DISK"):
                diskRef = parDic["disk_id"]
            else:
                diskRef = logicalName
            self.sendCmd(parDic["ngas_url"] + "/CLONE?disk_id=" +\
                         parDic["disk_id"],
                         "NGAS_CLONE_REPORT_" + diskRef + ".xml")
        except Exception, e:
            if (parDic["gen_html"]):
                pgName = "Error Status CLONE Command "+\
                         "(Disk Name: " + logicalName + ")"
                errTime = secs2IsoTime(time.time())
                htmlStatPg = ngasCmdDispatcherHtml.\
                             genErrPage(parDic, pgName, str(e), errTime)
                print htmlStatPg
            else:
                self.printAsciiErr(str(e))
            return

        # Write header for HTTP response.
        if (parDic["gen_html"]):
            print "Content-type: multipart/mixed;boundary="+self.HTTP_BOUNDARY
            print ""
            print "--" + self.HTTP_BOUNDARY

        # Start the loop to monitor the execution of the CLONE command.
        regCount = 0
        logIdx = 0
        run = 1
        startTime = time.time()
        ngasUserId = parDic["ngas_user_id"]
        while (run):
            statusPage = ""
            time.sleep(self.updateRate)
            newLogIdx, newLogLines = self.getNewLogLines(logIdx)
            if (newLogIdx != logIdx):
                logIdx = newLogIdx

                # Analyze log entries.
                for logLine in newLogLines:
                    if (logLine.find("[INFO] Cloned file - File ID:") != -1):
                        info(3,"NG/AMS cloned file (" + str(regCount) + "/" +\
                             str(expCloneFiles) + "): " + logLine)
                        regCount += 1
                        estimTime, totTime, timeFrame, timeUpdate =\
                                   genTimeStat(startTime, regCount,
                                               expCloneFiles)    
                        timeLastFrame = logLine.split(" ")[0].split(".")[0]
                        if (parDic["gen_html"]):
                            progStat = ngasCmdDispatcherHtml.\
                                       genHtmlProgressStat("Cloned", regCount, 
                                                           expCloneFiles,
                                                           estimTime,
                                                           timeLastFrame,
                                                           timeUpdate,
                                                           totTime,
                                                           timeFrame)
                            pgName = "Progress Status CLONE Command " +\
                                     "(Disk Name: " + logicalName + ")"
                            statusPage = "Content-type: text/html\n\n"
                            if (regCount == expCloneFiles):
                                genOkBut = 1
                            else:
                                genOkBut = 0
                            statusPage += ngasCmdDispatcherHtml.\
                                          genStatusWebPage(parDic, pgName,
                                                           progStat, genOkBut)
                            statusPage += "\n--" + self.HTTP_BOUNDARY
                        else:
                            print "Status CLONE Command: " +\
                                  "Copied: " + str(regCount) + " files " +\
                                  "out of: " + str(expCloneFiles) + " " +\
                                  "candidate files."
                            print "Estimated time remaining:     " + estimTime
                            print "Total time elapsed:           " + totTime
                            print "Time per frame:               " + timeFrame
                            print "Time for handling last frame: " +\
                                  timeLastFrame
                            print "Last update:                  " + timeUpdate
                            print "---------------------------------------" +\
                                  "---------------------------------"
                    elif (logLine.find("Total time for handling request: " +\
                                       "(GET,CLONE,,):") != -1):
                        run = 0
                        break
                    elif (logLine.find("Error: ") != -1):
                        # An error has occurred.
                        if (parDic["gen_html"]):
                            pgName = "Error Status CLONE Command " +\
                                     "(Disk Name: " + logicalName + ")"
                            errTime = secs2IsoTime(time.time())
                            htmlStatPg = ngasCmdDispatcherHtml.\
                                         genErrPage(parDic, pgName, logLine,
                                                    errTime)
                            print htmlStatPg
                        else:
                            self.printAsciiErr(logLine)
                        time.sleep(5)
                    if (regCount == expCloneFiles):
                        run = 0
                        break               
            if (statusPage): print statusPage
        self.stopLogFetcherThread()


    def controlCmdRemDisk(self,
                          parDic):
        """
        """
        info(2,"Executing command REMDISK. Parameters - " +\
             "NGAS host: " + parDic["ngas_host"] + ", " +\
             "Server URL: " + parDic["ngas_url"] + ", " +\
             "Disk ID: " + parDic["disk_id"] + ", " +\
             "Generate WEB Page: " + str(parDic["gen_html"]))

        # Get Logical Name of disk.
        logicalName = self.getLogicalName(parDic["disk_id"])
        if (logicalName == "UNKNOWN-DISK"):
            diskRef = parDic["disk_id"]
        else:
            diskRef = logicalName
        info(2,"Reference of disk to remove: " + diskRef)

        # Execute the REMDISK command.
        try:
            if (not parDic.has_key("execute")):
                # Execute the REMDISK command without the "execute" parameter
                # to probe for possible problems.
                res = self.sendCmd(parDic["ngas_url"] + "/REMDISK?disk_id=" +\
                                   parDic["disk_id"],
                                   "NGAS_REMDISK_REPORT_"+diskRef + ".xml", 1)
                stat = ngamsStatus.ngamsStatus().unpackXmlDoc(res, 1)
                print "Content-type: text/html\n"
                if (stat.getStatus() == NGAMS_FAILURE):
                    pgName = "Error Status REMDISK Command "+\
                             "(Disk Reference: " + diskRef + ")"
                    errTime = secs2IsoTime(time.time())
                    htmlStatPg = ngasCmdDispatcherHtml.\
                                 genErrPage(parDic, pgName,
                                            str(stat.getMessage()), errTime)
                    print htmlStatPg
                else:
                    ngasCmdDispatcherHtml.genRemDiskConfPage(parDic, stat)
            else:
                # Carry out the REMDISK - display disk removed status
                # for user.
                res = self.sendCmd(parDic["ngas_url"] + "/REMDISK?disk_id=" +\
                                   parDic["disk_id"] + "&execute=1",
                                   "NGAS_REMDISK_REPORT_"+diskRef + ".xml", 1)
                stat = ngamsStatus.ngamsStatus().unpackXmlDoc(res, 1)
                print "Content-type: text/html\n"
                if (stat.getStatus() == NGAMS_FAILURE):
                    pgName = "Error Status REMDISK Command "+\
                             "(Disk Reference: " + diskRef + ")"
                    errTime = secs2IsoTime(time.time())
                    htmlStatPg = ngasCmdDispatcherHtml.\
                                 genErrPage(parDic, pgName,
                                            str(stat.getMessage()), errTime)
                    print htmlStatPg
                else:
                    print ngasCmdDispatcherHtml.\
                          genRemDiskStatusPage(parDic, stat)
            return
        except Exception, e:
            if (parDic["gen_html"]):
                pgName = "Error Status REMDISK Command "+\
                         "(Disk Reference: " + diskRef + ")"
                errTime = secs2IsoTime(time.time())
                htmlStatPg = ngasCmdDispatcherHtml.\
                             genErrPage(parDic, pgName, str(e), errTime)
                print htmlStatPg
            else:
                self.printAsciiErr(str(e))
            return


def execQuery(argv):
    """
    """
    httpQuery = cgi.FieldStorage()
    
    # Determine a requestor ID for this session.
    if (os.environ.has_key("NGAS_USER_ID")):
        ngasUserId = os.environ["NGAS_USER_ID"].split(".")[0]
    elif (httpQuery.has_key("ngas_user_id")):
        ngasUserId = httpQuery["ngas_user_id"].value
    else:
        ngasUserId = "ngasmgr"

    # Get the base URL for the query.
    if (os.environ.has_key("SCRIPT_URI")):
        scriptUri = os.environ["SCRIPT_URI"]
    else:
        scriptUri = "http://arcdev.eso.org/bin/jknudstr/NGAS/" +\
                    "ngasCmdDispatcher.py"
        
    logFile = "/tmp/NgasMgrWeb_" + ngasUserId + ".log"
    os.system("touch " + logFile)
    os.system("chmod -f a+rw " + logFile)
    PccLog.setLogCond(5, logFile, 0, [-1, -1, ""], 0)

    # Define default parameters for the query.
    parDic = {\
        "ngas_user_id":  ngasUserId,
        "command":       "",
        "disk_id":       "",
        "ngas_url":      "http://ngasdev1:7777",
        "log_file":      "/NGAS/ngams_staging/log/LogFile.nglog",
        "ngas_host":     "ngasdev1",
        "db_srv":        "LUXSRV",
        "db_name":       "ngas",
        "db_user":       "ngas",
        "db_pw":         "bmdhc19wdw==",
        "update_rate":   None,
        "notif_email":   None,
        "host_id_pat":   "ngasdev",
        "gen_html":      1,
        "script_uri":    scriptUri}

    # Check if there is a definition file, in case yes import it.
    defFile = os.path.normpath(getSrcDir() + "/" + "NGAS_CMD_DISPATCHER_DEF_"+\
                               ngasUserId + ".py")

    # Load the resource file for this requestor.These overwrite the
    # default parameters if redefined in the resource file.
    if (os.path.exists(defFile)):
        info(1,"Found NGAS Command Dispatcher Definition File: " + defFile +\
             " - Loading")
        fo = open(defFile)
        defSrc = fo.read()
        fo.close()
        defSrcLines = defSrc.split("\n")
        for line in defSrcLines:
            line = line.strip()
            if ((len(line) > 0) and (line[0] != "#")):
                lineComps = line.split("=")
                par = lineComps[0].strip()
                val = lineComps[1].strip()
                if (val[0] == '"'): val = val[1:]
                if (val[-1] == '"'): val = val[0:-1]
                parDic[par] = val

    # Get parameters in connection with the HTTP query. These overwrite the
    # default parameters if redefined.
    if (os.environ.has_key("QUERY_STRING")):
        for par in httpQuery.keys():
            parDic[par] = httpQuery[par].value
        #for par in parDic.keys():
        #    if (httpQuery.has_key(par)): parDic[par] = httpQuery[par].value
    else:
        data1DiskId = "IC35L040AVER07-0-SXPTX093675"     # data1
        data5DiskId = "IC35L080AVVA07-0-VNC400A4G0KYAA"  # data5
        #parDic["disk_id"] = data1DiskId
        parDic["gen_html"] = 0

    # Execute the query.
    cmdDispatcher = ngasCmdDispatcher(parDic["db_srv"], parDic["db_name"],
                                      parDic["db_user"], parDic["db_pw"])
    if (parDic["update_rate"]):
        cmdDispatcher.updateRate = int(parDic["update_rate"])
    if (parDic["notif_email"]):
        cmdDispatcher.notifEmail = parDic["notif_email"]
    parDic["gen_html"] = int(parDic["gen_html"])
    if (parDic["command"] == "CLONE"):
        cmdDispatcher.controlCmdClone(parDic)
    elif (parDic["command"] == "REMDISK"):
        cmdDispatcher.controlCmdRemDisk(parDic)
    elif (parDic["disk_id"] != ""):
        cmdDispatcher.genSpecDiskPage(parDic)
    else:
        # Print disk overview page.
        #print '<b>DEL USER: ' + os.environ["USER"] + '</b><br>'
        cmdDispatcher.genDiskStatus(parDic)

    del cmdDispatcher
    sys.exit(0)


if __name__ == '__main__':
    """
    Main routine to make a connection to the DB.
    """
    execQuery(sys.argv)


# --- oOo ---
# export QUERY_STRING='command=CLONE&disk_id=IC35L040AVER07-0-SXPTX093675'
